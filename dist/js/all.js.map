{"version":3,"sources":["all.js"],"names":["deck","document","querySelector","restart","cardDef","nr","symbols_def","createCards","deck_content","createDocumentFragment","shuffle","this","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","symbols","Symbol","iterator","next","done","symbol","value","appendChild","createCard","err","return","setTimeout","startCards","card","createElement","classList","add","innerHTML","concat","querySelectorAll","forEach","toggle","openCard","current_card","flipCard","item","open_cards","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","rotate_deg","setProperty","card_nr","scoresDef","score_node","closeCards","stars_def","stars_cur","open_card_list","shakePanel","Counter","_ref","node","_ref$step","step","_classCallCheck","moves_cur","set","root","documentElement","style","textContent","scores","get","counter","reset","timeDef","time_node","time_sec","time_min","time_started","time_interval","s_pref","m_pref","start","_this","setInterval","clearInterval","HTML","tick","removeChilds","firstChild","removeChild","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","playSound","sound_name","readyState","audio","currentTime","cur_card","click_elem","list_elem","timeTick","updateMatch","updateNoMatch","_step3","_iterator3","cards","_iteratorNormalCompletion3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","clickCard","event","target","checkMatch","contains","push","moves","showMatchWin","showScores","sco_content","sco_moves","sco_stars","stars_node","sco_time","restartGame","stars_frag","stars_html","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","updateStars","new_stars","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","setStars","console","addEventListener"],"mappings":"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","file":"all.js","sourcesContent":["'use strict';\r\n// ------------------ global consts & variables ---------------------\r\n// DOM nodes\r\nconst deck = document.querySelector('.deck');\r\nconst restart = document.querySelector('.restart');\r\n\r\n//  object cards symbols, properties and methods\r\nconst cardDef = {\r\n    nr: 1,\r\n    symbols_def: [\r\n        'chevron-circle-left',\r\n        'clock',\r\n        'check-circle',\r\n        'dragon',\r\n        'eye',\r\n        'compass',\r\n        'adjust',\r\n        'cloud-sun'\r\n    ],\r\n\r\n    // Cards initial layout\r\n    createCards: function createCards() {\r\n        const deck_content = document.createDocumentFragment();\r\n        // duplicates symbols to match cards numer and shuffles them\r\n        let symbols = shuffle([...this.symbols_def, ...this.symbols_def]);\r\n\r\n        for (let symbol of symbols) {\r\n            deck_content.appendChild(this.createCard(symbol));\r\n        }\r\n        //reset cards nr for next game\r\n        this.nr = 1;\r\n\r\n        deck.appendChild(deck_content);\r\n        //animate cards\r\n        setTimeout(this.startCards, 0);\r\n    },\r\n\r\n    createCard: function createCard(symbol) {\r\n        const card = document.createElement('div');\r\n        card.classList.add('card');\r\n        card.classList.add('n' + this.nr);\r\n        // creates element with font awesome defined in CSS\r\n        card.innerHTML = `<div class=\"fas fa-${symbol}\"></div>`;\r\n        this.nr++\r\n        return card;\r\n    },\r\n\r\n    // positon cards around circle CSS\r\n    startCards: function startCards() {\r\n        const cards = document.querySelectorAll('.card');\r\n        cards.forEach(function (card) {\r\n            card.classList.toggle('start');\r\n        });\r\n    },\r\n\r\n    openCard: function openCard(current_card) {\r\n        current_card.classList.toggle('open');\r\n        this.flipCard(current_card.classList.item(1), 180);\r\n    },\r\n\r\n    closeCards: function closeCards(open_cards) {\r\n        for (let card of open_cards) {\r\n            card.classList.toggle('open');\r\n            card.classList.toggle('nomatch');\r\n            this.flipCard(card.classList.item(1), 0);\r\n        }\r\n    },\r\n\r\n    flipCard: function flipCard(card_nr, rotate_deg) {\r\n        const root = document.documentElement;\r\n        root.style.setProperty(\"--\" + card_nr, rotate_deg + \"deg\");\r\n    },\r\n\r\n};\r\n\r\n// object scores panel properties and methods\r\nconst scoresDef = {\r\n    score_node: document.querySelector('.score-panel'),\r\n    stars_node: document.querySelector('.stars'),\r\n    stars_def: [30, 40, 50, 60, 70], //tresholds to subsract stars\r\n    stars_cur: 0, //lost points - stars count\r\n    open_card_list: [], //list of open cards to match - max 2\r\n\r\n    shakePanel: function () {\r\n        this.score_node.classList.toggle('animated');\r\n        this.score_node.classList.toggle('shake');\r\n    }\r\n}\r\n\r\n// ------------------------ ES6 class ------------------\r\n// object passed as atribute for constructor\r\nclass Counter{\r\n    constructor({node, step = 1}) {\r\n        this.step = step;\r\n        this.node = node;\r\n        this.moves_cur = 0;\r\n    }\r\n    get() {\r\n        return this.moves_cur;\r\n    }\r\n    add() {\r\n        this.moves_cur += this.step;\r\n        this.set();\r\n        return this.moves_cur;\r\n    }\r\n    reset() {\r\n        this.moves_cur = 0;\r\n        this.set();\r\n        return this.moves_cur;\r\n    }\r\n    set() {\r\n        this.node.textContent = this.moves_cur;\r\n    }\r\n}\r\nconst moves = new Counter({node: document.querySelector('.moves')});\r\n\r\n//  commented to show module design pattern below\r\n//  using that same properties and methods\r\n// const scores = new Counter({ node: document.querySelector('.matched'), step: 2});\r\n\r\n\r\n// ------------------------ Module design pattern ------------------\r\n//\r\n//   with private variables, objects return and IIFE\r\n//\r\n\r\nconst scores = (function () {\r\n    const node = document.querySelector('.matched');\r\n    let counter = 0;\r\n    let step = 2;\r\n    return {\r\n        get: function () {\r\n            return counter;\r\n        },\r\n        add: function () {\r\n            counter += step;\r\n            this.set();\r\n            return counter;\r\n        },\r\n        reset: function () {\r\n            counter = 0;\r\n            this.set();\r\n            return counter;\r\n        },\r\n        set: function () {\r\n            node.textContent = counter;\r\n        }\r\n    }\r\n})();\r\n\r\n\r\n// ------------------ Utilities -----------------------\r\n\r\n// timer\r\nconst timeDef = {\r\n    time_node: document.querySelector(\".time\"),\r\n    time_sec: 0,\r\n    time_min: 0,\r\n    time_started: false,\r\n    time_interval: '',\r\n\r\n    s_pref: function() {\r\n        return (this.time_sec < 10) ? \"0\" : \"\";\r\n    },\r\n\r\n    m_pref: function() {\r\n        return (this.time_min < 10) ? \"0\" : \"\";\r\n    },\r\n\r\n    start: function timeStart() {\r\n        this.time_started = true;\r\n        this.time_interval = setInterval(() => {\r\n            this.HTML();\r\n            this.tick();\r\n        }, 1000);\r\n    },\r\n\r\n    reset: function timeReset() {\r\n        clearInterval(this.time_interval);\r\n        this.time_started = false;\r\n        this.time_min = 0;\r\n        this.time_sec = 0;\r\n        this.HTML();\r\n    },\r\n\r\n    HTML: function timeHTML() {\r\n        this.time_node.innerHTML = this.m_pref() + this.time_min + \":\" + this.s_pref() + this.time_sec;\r\n    },\r\n\r\n    tick: function timeTick() {\r\n        this.time_sec++;\r\n        if (this.time_sec == 60) {\r\n            this.time_min++;\r\n            this.time_sec = 0;\r\n        }\r\n    },\r\n}\r\n\r\nfunction removeChilds(node) {\r\n    while (node.firstChild) {\r\n        node.removeChild(node.firstChild);\r\n    }\r\n}\r\n\r\n// Shuffle function from http://stackoverflow.com/a/2450976\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length,\r\n        temporaryValue, randomIndex;\r\n\r\n    while (currentIndex !== 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\n//  play sound_name -----------------\r\nfunction playSound(sound_name) {\r\n    if (document.readyState == 'complete') {\r\n        const audio = document.querySelector(`audio[data-key='${sound_name}']`);\r\n        if (!audio) return; //stop if no audio definition\r\n        audio.volume = 0.25;\r\n        audio.currentTime = 0; //rewind to start\r\n        audio.play();\r\n    }\r\n}\r\n\r\n// ------------------------ Card Matching ---------------------------\r\n\r\nfunction checkMatch(cur_card) {\r\n    // check if some card is already selected or if there is no more than 2 cards to match\r\n    if ((scoresDef.open_card_list.length <= 1) || (scoresDef.open_card_list.length > 2)) {\r\n        return;\r\n    }\r\n\r\n    let click_elem = cur_card.querySelector('.fas');\r\n    let list_elem = scoresDef.open_card_list[0].querySelector('.fas')\r\n\r\n    //check if cards symbols match\r\n    if (click_elem.classList.value === list_elem.classList.value) {\r\n        updateMatch(scoresDef.open_card_list);\r\n    } else {\r\n        updateNoMatch(scoresDef.open_card_list);\r\n    }\r\n\r\n    scoresDef.open_card_list = []\r\n}\r\n\r\nfunction updateNoMatch(cards) {\r\n    scoresDef.shakePanel();\r\n    playSound('bad');\r\n\r\n    for (let card of cards) {\r\n        card.classList.toggle('nomatch');\r\n    }\r\n\r\n    setTimeout(() => {\r\n        cardDef.closeCards(cards);\r\n        playSound('flip');\r\n        scoresDef.shakePanel();\r\n    }, 1000);\r\n}\r\n\r\nfunction updateMatch(cards) {\r\n\r\n    scores.add();\r\n    playSound('ok');\r\n\r\n    setTimeout(() => {\r\n        for (let card of cards) {\r\n            card.classList.toggle('match');\r\n        }\r\n        showMatchWin();\r\n    }, 1000);\r\n}\r\n\r\nfunction clickCard(event) {\r\n    let cur_card = event.target;\r\n\r\n    (timeDef.time_started) ? '' : timeDef.start();\r\n    // check if the card was clicked & is not yet matched\r\n    // console.log(cur_card.classList.value);\r\n\r\n    if ((cur_card.classList.contains('card')) && !(cur_card.classList.contains('nomatch')) && !(cur_card.classList.contains('match'))) {\r\n        cardDef.openCard(cur_card);\r\n        playSound('flip');\r\n        scoresDef.open_card_list.push(cur_card);\r\n        checkMatch(cur_card);\r\n        moves.add();\r\n        updateStars();\r\n    }\r\n}\r\n\r\n// ----------------- Scores ---------------------\r\n\r\n// show winner moves and stars count\r\nfunction showMatchWin() {\r\n    if (scores.get() === 16) {\r\n        console.log('win win');\r\n        setTimeout(() => {\r\n                showScores();\r\n            },\r\n            1000);\r\n    }\r\n}\r\n\r\nfunction showScores() {\r\n    // stop timerDef\r\n    clearInterval(timeDef.time_interval);\r\n    //hide cards\r\n    cardDef.startCards();\r\n\r\n    let sco_content = document.createElement('div');\r\n    sco_content.classList.add('win');\r\n\r\n    const sco_moves = moves.get();\r\n    const sco_stars = scoresDef.stars_node.innerHTML;\r\n    const sco_time = timeDef.time_node.textContent;\r\n\r\n    sco_content.innerHTML = `<span><strong>YOU ARE A WINNNER !!!</strong></span>\r\n                            <div>Your moves: ${sco_moves}</div>\r\n                            <div class=\"stars\">Stars: ${sco_stars}</div>\r\n                            <div>Time: ${sco_time}</div>\r\n                            <div class=\"sco_restart\">\r\n                                <i class=\"fa fa-redo-alt\"></i>\r\n                            </div>`;\r\n\r\n    deck.appendChild(sco_content);\r\n    let sco_restart = document.querySelector('.sco_restart');\r\n    sco_restart.addEventListener('click', restartGame);\r\n    playSound('win');\r\n}\r\n\r\n\r\n// ---------------- Stars -----------------\r\n\r\n// generate stars\r\nfunction setStars() {\r\n    removeChilds(scoresDef.stars_node);\r\n    let stars_frag = document.createElement('span');\r\n    let stars_html = '';\r\n    for (let star_level of scoresDef.stars_def) {\r\n        if (star_level > moves.get()) {\r\n            stars_html = stars_html + `<div><i class=\"fas fa-star\"></i></div>`;\r\n        } else {\r\n            stars_html = stars_html + `<div><i class=\"far fa-star\"></i></div>`;\r\n        }\r\n    }\r\n    stars_frag.innerHTML = stars_html;\r\n    scoresDef.stars_node.appendChild(stars_frag);\r\n\r\n}\r\n\r\n// update stars ONLY on treshold from stars_def\r\nfunction updateStars() {\r\n    let new_stars = 0;\r\n\r\n    for (let star_level of scoresDef.stars_def) {\r\n        if (star_level < moves.get()) {\r\n            new_stars = new_stars + 1;\r\n        }\r\n    }\r\n    if (scoresDef.stars_cur < new_stars) {\r\n        scoresDef.stars_cur = new_stars;\r\n        // console.log(scoresDef.stars_cur);\r\n        setStars();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// ---------------- Game init / restart -----------------\r\n\r\nfunction restartGame() {\r\n    //clean deck\r\n    removeChilds(deck);\r\n\r\n    //pepare cards\r\n    cardDef.createCards();\r\n\r\n    //reset moves & scores\r\n    moves.reset();\r\n    scores.reset();\r\n\r\n    //reset stars\r\n    setStars();\r\n\r\n    //resetTime(timerDef);\r\n    timeDef.reset();\r\n}\r\n\r\nrestartGame();\r\n\r\n\r\nrestart.addEventListener('click', restartGame);\r\ndeck.addEventListener('click', clickCard);"]}